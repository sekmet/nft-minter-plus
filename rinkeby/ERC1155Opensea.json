{
  "address": "0x766986e8F8774d5518845db540089a3E4A5C5FaF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxyRegistryAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_contractUri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_metadataUri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_quantities",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "creators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseMetadataURI",
          "type": "string"
        }
      ],
      "name": "setBaseMetadataURI",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "setCreator",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x79787402b81cf42a0858393eb44cf3e2d7383d1d080f3bd4df87cd48882c1a35",
  "receipt": {
    "to": null,
    "from": "0x7EF99B0E5bEb8ae42DbF126B40b87410a440a32a",
    "contractAddress": "0x766986e8F8774d5518845db540089a3E4A5C5FaF",
    "transactionIndex": 20,
    "gasUsed": "3647459",
    "logsBloom": "0x
    "blockHash": "0x1ff4eb3eb7219f58967c1e3f29c624717145de82d75a08892f8135fe371cfa30",
    "transactionHash": "0x79787402b81cf42a0858393eb44cf3e2d7383d1d080f3bd4df87cd48882c1a35",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 8294427,
        "transactionHash": "0x79787402b81cf42a0858393eb44cf3e2d7383d1d080f3bd4df87cd48882c1a35",
        "address": "0x766986e8F8774d5518845db540089a3E4A5C5FaF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007ef99b0e5beb8ae42dbf126b40b87410a440a32a"
        ],
        "data": "0x",
        "logIndex": 33,
        "blockHash": "0x1ff4eb3eb7219f58967c1e3f29c624717145de82d75a08892f8135fe371cfa30"
      }
    ],
    "blockNumber": 8294427,
    "cumulativeGasUsed": "6203984",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf57b2c51ded3a29e6891aba85459d600256cf317",
    "https://gateway.pinata.cloud/ipfs/Qme62PVhFnXKT7mUPC6C8BnxRWm67aa1Q2DQ1riWk4TDyU",
    "https://gateway.pinata.cloud/ipfs/QmbHc4TRoZQh4ZnnM2UQSr11diDdFpeXt1dntVw7jUhTvH/",
    "Tokens created by nft-minter",
    "NFTM"
  ],
  "solcInputHash": "1bc25fbbe8e1370a35d8208ef10b851c",
  "metadata": "{\"compiler\":{\"version\":\"0.5.12+commit.7709ece9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contractUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metadataUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"batchMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseMetadataURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"setCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"_id\":\"ID of the Token\",\"_owner\":\"The address of the token holder\"},\"return\":\"The _owner's balance of the Token type requested\"},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"_ids\":\"ID of the Tokens\",\"_owners\":\"The addresses of the token holders\"},\"return\":\"The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\"},\"batchMint(address,uint256[],uint256[],bytes)\":{\"details\":\"Mint tokens for each id in _ids\",\"params\":{\"_data\":\"Data to pass if receiver is contract\",\"_ids\":\"Array of ids to mint\",\"_quantities\":\"Array of amounts of tokens to mint per id\",\"_to\":\"The address to mint tokens to\"}},\"create(address,uint256,string,bytes)\":{\"details\":\"Creates a new token type and assigns _initialSupply to an address NOTE: remove onlyOwner if you want third parties to create new tokens on your contract (which may change your IDs)\",\"params\":{\"_data\":\"Data to pass if receiver is contract\",\"_initialOwner\":\"address of the first owner of the token\",\"_initialSupply\":\"amount to supply the first owner\",\"_uri\":\"Optional URI for this token type\"},\"return\":\"The newly created token ID\"},\"isOwner()\":{\"return\":\"true if `msg.sender` is the owner of the contract.\"},\"mint(address,uint256,uint256,bytes)\":{\"details\":\"Mints some amount of tokens to an address\",\"params\":{\"_data\":\"Data to pass if receiver is contract\",\"_id\":\"Token ID to mint\",\"_quantity\":\"Amount of tokens to mint\",\"_to\":\"Address of the future owner of the token\"}},\"owner()\":{\"return\":\"the address of the owner.\"},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"_amounts\":\"Transfer amounts per token type\",\"_data\":\"Additional data with no specified format, sent in call to `_to`\",\"_from\":\"Source addresses\",\"_ids\":\"IDs of each token type\",\"_to\":\"Target addresses\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"_amount\":\"Transfered amount\",\"_data\":\"Additional data with no specified format, sent in call to `_to`\",\"_from\":\"Source address\",\"_id\":\"ID of the token type\",\"_to\":\"Target address\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"_approved\":\"True if the operator is approved, false to revoke approval\",\"_operator\":\"Address to add to the set of authorized operators\"}},\"setBaseMetadataURI(string)\":{\"details\":\"Will update the base URL of token's URI\",\"params\":{\"_newBaseMetadataURI\":\"New base URL of token's URI\"}},\"setCreator(address,uint256[])\":{\"details\":\"Change the creator address for given tokens\",\"params\":{\"_ids\":\"Array of Token IDs to change creator\",\"_to\":\"Address of the new creator\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"return\":\"`true` if the contract implements `_interfaceID` and\"},\"totalSupply(uint256)\":{\"details\":\"Returns the total quantity for a token ID\",\"params\":{\"_id\":\"uint256 ID of the token to query\"},\"return\":\"amount of token in existence\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}},\"title\":\"MyCollectible MyCollectible - a contract for my semi-fungible tokens.\"},\"userdoc\":{\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"Get the balance of an account's Tokens\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"Get the balance of multiple account/token pairs\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\"},\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Send multiple types of Tokens from the _from address to the _to address (with safety call)\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Transfers amount amount of an _id from the _from address to the _to address specified\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/ERC1155Opensea.sol\":\"ERC1155Opensea\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC1155Opensea.sol\":{\"content\":\"pragma solidity ^0.5.11;\\n\\nimport \\\"./ERC1155Tradable.sol\\\";\\n\\n/**\\n * @title MyCollectible\\n * MyCollectible - a contract for my semi-fungible tokens.\\n */\\ncontract ERC1155Opensea is ERC1155Tradable {\\n\\n  string internal openseaContractUri;\\n\\n  constructor(address _proxyRegistryAddress, string memory _contractUri, string memory _metadataUri, string memory _name, string memory _symbol)\\n  ERC1155Tradable(\\n    _name,\\n    _symbol,\\n    _proxyRegistryAddress\\n  ) public {\\n    _setBaseMetadataURI(_metadataUri);\\n    _setContractURI(_contractUri);\\n  }\\n\\n  /**\\n   * @notice Will update the base URL of token's URI\\n   * @param _newContractiURI New base URL of token's URI\\n   */\\n  function _setContractURI(string memory _newContractiURI) internal {\\n    openseaContractUri = _newContractiURI;\\n  }\\n\\n  function contractURI() public view returns (string memory) {\\n    return openseaContractUri;\\n  }\\n}\\n\",\"keccak256\":\"0xafc96c8075d3ef60a84849c8c6abd70ee3039028dc5d818480d7ced21480e8c2\"},\"contracts/ERC1155Tradable.sol\":{\"content\":\"pragma solidity ^0.5.12;\\n\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport 'multi-token-standard/contracts/tokens/ERC1155/ERC1155.sol';\\nimport 'multi-token-standard/contracts/tokens/ERC1155/ERC1155Metadata.sol';\\nimport 'multi-token-standard/contracts/tokens/ERC1155/ERC1155MintBurn.sol';\\nimport \\\"./Strings.sol\\\";\\n\\ncontract OwnableDelegateProxy { }\\n\\ncontract ProxyRegistry {\\n  mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\\n/**\\n * @title ERC1155Tradable\\n * ERC1155Tradable - ERC1155 contract that whitelists an operator address, has create and mint functionality, and supports useful standards from OpenZeppelin,\\n  like _exists(), name(), symbol(), and totalSupply()\\n */\\ncontract ERC1155Tradable is ERC1155, ERC1155MintBurn, ERC1155Metadata, Ownable {\\n  using Strings for string;\\n\\n  address proxyRegistryAddress;\\n  uint256 private _currentTokenID = 0;\\n  mapping (uint256 => address) public creators;\\n  mapping (uint256 => uint256) public tokenSupply;\\n  // Contract name\\n  string public name;\\n  // Contract symbol\\n  string public symbol;\\n\\n  /**\\n   * @dev Require msg.sender to be the creator of the token id\\n   */\\n  modifier creatorOnly(uint256 _id) {\\n    require(creators[_id] == msg.sender, \\\"ERC1155Tradable#creatorOnly: ONLY_CREATOR_ALLOWED\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Require msg.sender to own more than 0 of the token id\\n   */\\n  modifier ownersOnly(uint256 _id) {\\n    require(balances[msg.sender][_id] > 0, \\\"ERC1155Tradable#ownersOnly: ONLY_OWNERS_ALLOWED\\\");\\n    _;\\n  }\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    address _proxyRegistryAddress\\n  ) public {\\n    name = _name;\\n    symbol = _symbol;\\n    proxyRegistryAddress = _proxyRegistryAddress;\\n  }\\n\\n  function uri(\\n    uint256 _id\\n  ) public view returns (string memory) {\\n    require(_exists(_id), \\\"ERC721Tradable#uri: NONEXISTENT_TOKEN\\\");\\n    return Strings.strConcat(\\n      baseMetadataURI,\\n      Strings.uint2str(_id)\\n    );\\n  }\\n\\n  /**\\n    * @dev Returns the total quantity for a token ID\\n    * @param _id uint256 ID of the token to query\\n    * @return amount of token in existence\\n    */\\n  function totalSupply(\\n    uint256 _id\\n  ) public view returns (uint256) {\\n    return tokenSupply[_id];\\n  }\\n\\n  /**\\n   * @dev Will update the base URL of token's URI\\n   * @param _newBaseMetadataURI New base URL of token's URI\\n   */\\n  function setBaseMetadataURI(\\n    string memory _newBaseMetadataURI\\n  ) public onlyOwner {\\n    _setBaseMetadataURI(_newBaseMetadataURI);\\n  }\\n\\n  /**\\n    * @dev Creates a new token type and assigns _initialSupply to an address\\n    * NOTE: remove onlyOwner if you want third parties to create new tokens on your contract (which may change your IDs)\\n    * @param _initialOwner address of the first owner of the token\\n    * @param _initialSupply amount to supply the first owner\\n    * @param _uri Optional URI for this token type\\n    * @param _data Data to pass if receiver is contract\\n    * @return The newly created token ID\\n    */\\n  function create(\\n    address _initialOwner,\\n    uint256 _initialSupply,\\n    string calldata _uri,\\n    bytes calldata _data\\n  ) external onlyOwner returns (uint256) {\\n\\n    uint256 _id = _currentTokenID;\\n    creators[_id] = msg.sender;\\n\\n    if (bytes(_uri).length > 0) {\\n      emit URI(_uri, _id);\\n    }\\n\\n    _mint(_initialOwner, _id, _initialSupply, _data);\\n    tokenSupply[_id] = _initialSupply;\\n\\n    _incrementTokenTypeId();\\n    return _id;\\n  }\\n\\n  /**\\n    * @dev Mints some amount of tokens to an address\\n    * @param _to          Address of the future owner of the token\\n    * @param _id          Token ID to mint\\n    * @param _quantity    Amount of tokens to mint\\n    * @param _data        Data to pass if receiver is contract\\n    */\\n  function mint(\\n    address _to,\\n    uint256 _id,\\n    uint256 _quantity,\\n    bytes memory _data\\n  ) public creatorOnly(_id) {\\n    _mint(_to, _id, _quantity, _data);\\n    tokenSupply[_id] = tokenSupply[_id].add(_quantity);\\n  }\\n\\n  /**\\n    * @dev Mint tokens for each id in _ids\\n    * @param _to          The address to mint tokens to\\n    * @param _ids         Array of ids to mint\\n    * @param _quantities  Array of amounts of tokens to mint per id\\n    * @param _data        Data to pass if receiver is contract\\n    */\\n  function batchMint(\\n    address _to,\\n    uint256[] memory _ids,\\n    uint256[] memory _quantities,\\n    bytes memory _data\\n  ) public {\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n      uint256 _id = _ids[i];\\n      require(creators[_id] == msg.sender, \\\"ERC1155Tradable#batchMint: ONLY_CREATOR_ALLOWED\\\");\\n      uint256 quantity = _quantities[i];\\n      tokenSupply[_id] = tokenSupply[_id].add(quantity);\\n    }\\n    _batchMint(_to, _ids, _quantities, _data);\\n  }\\n\\n  /**\\n    * @dev Change the creator address for given tokens\\n    * @param _to   Address of the new creator\\n    * @param _ids  Array of Token IDs to change creator\\n    */\\n  function setCreator(\\n    address _to,\\n    uint256[] memory _ids\\n  ) public {\\n    require(_to != address(0), \\\"ERC1155Tradable#setCreator: INVALID_ADDRESS.\\\");\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n      uint256 id = _ids[i];\\n      _setCreator(_to, id);\\n    }\\n  }\\n\\n  /**\\n   * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\\n   */\\n  function isApprovedForAll(\\n    address _owner,\\n    address _operator\\n  ) public view returns (bool isOperator) {\\n    // Whitelist OpenSea proxy contract for easy trading.\\n    ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\n    if (address(proxyRegistry.proxies(_owner)) == _operator) {\\n      return true;\\n    }\\n\\n    return ERC1155.isApprovedForAll(_owner, _operator);\\n  }\\n\\n  /**\\n    * @dev Change the creator address for given token\\n    * @param _to   Address of the new creator\\n    * @param _id  Token IDs to change creator of\\n    */\\n  function _setCreator(address _to, uint256 _id) internal creatorOnly(_id)\\n  {\\n      creators[_id] = _to;\\n  }\\n\\n  /**\\n    * @dev Returns whether the specified token exists by checking to see if it has a creator\\n    * @param _id uint256 ID of the token to query the existence of\\n    * @return bool whether the token exists\\n    */\\n  function _exists(\\n    uint256 _id\\n  ) internal view returns (bool) {\\n    return creators[_id] != address(0);\\n  }\\n\\n  /**\\n    * @dev increments the value of _currentTokenID\\n    */\\n  function _incrementTokenTypeId() private  {\\n    _currentTokenID++;\\n  }\\n}\\n\",\"keccak256\":\"0xd21133ce017897b37b23e9327127354580e4cbce2019d338d5611adaccccc0e7\"},\"contracts/Strings.sol\":{\"content\":\"pragma solidity ^0.5.11;\\n\\nlibrary Strings {\\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\\n  function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory) {\\n      bytes memory _ba = bytes(_a);\\n      bytes memory _bb = bytes(_b);\\n      bytes memory _bc = bytes(_c);\\n      bytes memory _bd = bytes(_d);\\n      bytes memory _be = bytes(_e);\\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\\n      bytes memory babcde = bytes(abcde);\\n      uint k = 0;\\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\\n      for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\\n      for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\\n      for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\\n      for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];\\n      return string(babcde);\\n    }\\n\\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory) {\\n        return strConcat(_a, _b, _c, _d, \\\"\\\");\\n    }\\n\\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\\n        return strConcat(_a, _b, _c, \\\"\\\", \\\"\\\");\\n    }\\n\\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\\n        return strConcat(_a, _b, \\\"\\\", \\\"\\\", \\\"\\\");\\n    }\\n\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = byte(uint8(48 + _i % 10));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\",\"keccak256\":\"0x9b8fbbe7631bdefbc43d541513641a8c560036fff257722fbef18d85d7134d5c\"},\"multi-token-standard/contracts/interfaces/IERC1155.sol\":{\"content\":\"pragma solidity ^0.5.12;\\n\\n\\ninterface IERC1155 {\\n  // Events\\n\\n  /**\\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n   *   Operator MUST be msg.sender\\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n   *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n   */\\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\\n\\n  /**\\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n   *   Operator MUST be msg.sender\\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n   *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n   */\\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\\n\\n  /**\\n   * @dev MUST emit when an approval is updated\\n   */\\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n  /**\\n   * @dev MUST emit when the URI is updated for a token ID\\n   *   URIs are defined in RFC 3986\\n   *   The URI MUST point a JSON file that conforms to the \\\"ERC-1155 Metadata JSON Schema\\\"\\n   */\\n  event URI(string _amount, uint256 indexed _id);\\n\\n  /**\\n   * @notice Transfers amount of an _id from the _from address to the _to address specified\\n   * @dev MUST emit TransferSingle event on success\\n   * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n   * MUST throw if `_to` is the zero address\\n   * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\\n   * MUST throw on any other error\\n   * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n   * @param _from    Source address\\n   * @param _to      Target address\\n   * @param _id      ID of the token type\\n   * @param _amount  Transfered amount\\n   * @param _data    Additional data with no specified format, sent in call to `_to`\\n   */\\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\\n\\n  /**\\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n   * @dev MUST emit TransferBatch event on success\\n   * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n   * MUST throw if `_to` is the zero address\\n   * MUST throw if length of `_ids` is not the same as length of `_amounts`\\n   * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\\n   * MUST throw on any other error\\n   * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n   * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\\n   * @param _from     Source addresses\\n   * @param _to       Target addresses\\n   * @param _ids      IDs of each token type\\n   * @param _amounts  Transfer amounts per token type\\n   * @param _data     Additional data with no specified format, sent in call to `_to`\\n  */\\n  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\\n  \\n  /**\\n   * @notice Get the balance of an account's Tokens\\n   * @param _owner  The address of the token holder\\n   * @param _id     ID of the Token\\n   * @return        The _owner's balance of the Token type requested\\n   */\\n  function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the balance of multiple account/token pairs\\n   * @param _owners The addresses of the token holders\\n   * @param _ids    ID of the Tokens\\n   * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n   */\\n  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n   * @dev MUST emit the ApprovalForAll event on success\\n   * @param _operator  Address to add to the set of authorized operators\\n   * @param _approved  True if the operator is approved, false to revoke approval\\n   */\\n  function setApprovalForAll(address _operator, bool _approved) external;\\n\\n  /**\\n   * @notice Queries the approval status of an operator for a given owner\\n   * @param _owner     The owner of the Tokens\\n   * @param _operator  Address of authorized operator\\n   * @return           True if the operator is approved, false if not\\n   */\\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\\n\\n}\\n\",\"keccak256\":\"0x68b549031029b9f8a0eec4da4a9c7fd83030a6e666fefffbe97d3d683c0a35d4\"},\"multi-token-standard/contracts/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"pragma solidity ^0.5.12;\\n\\n/**\\n * @dev ERC-1155 interface for accepting safe transfers.\\n */\\ninterface IERC1155TokenReceiver {\\n\\n  /**\\n   * @notice Handle the receipt of a single ERC1155 token type\\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\\n   * This function MAY throw to revert and reject the transfer\\n   * Return of other amount than the magic value MUST result in the transaction being reverted\\n   * Note: The token contract address is always the message sender\\n   * @param _operator  The address which called the `safeTransferFrom` function\\n   * @param _from      The address which previously owned the token\\n   * @param _id        The id of the token being transferred\\n   * @param _amount    The amount of tokens being transferred\\n   * @param _data      Additional data with no specified format\\n   * @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n   */\\n  function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4);\\n\\n  /**\\n   * @notice Handle the receipt of multiple ERC1155 token types\\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\\n   * This function MAY throw to revert and reject the transfer\\n   * Return of other amount than the magic value WILL result in the transaction being reverted\\n   * Note: The token contract address is always the message sender\\n   * @param _operator  The address which called the `safeBatchTransferFrom` function\\n   * @param _from      The address which previously owned the token\\n   * @param _ids       An array containing ids of each token being transferred\\n   * @param _amounts   An array containing amounts of each token being transferred\\n   * @param _data      Additional data with no specified format\\n   * @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n   */\\n  function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);\\n\\n  /**\\n   * @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\\n   * @param  interfaceID The ERC-165 interface ID that is queried for support.s\\n   * @dev This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.\\n   *      This function MUST NOT consume more than 5,000 gas.\\n   * @return Wheter ERC-165 or ERC1155TokenReceiver interfaces are supported.\\n   */\\n  function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n}\",\"keccak256\":\"0x3cdf862cc5d3403ea83f548e5a5fbd11d4fb9a4f2da9b8b234c1799419b39f2b\"},\"multi-token-standard/contracts/interfaces/IERC165.sol\":{\"content\":\"pragma solidity ^0.5.12;\\n\\n\\n/**\\n * @title ERC165\\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\\n */\\ninterface IERC165 {\\n\\n    /**\\n     * @notice Query if a contract implements an interface\\n     * @dev Interface identification is specified in ERC-165. This function\\n     * uses less than 30,000 gas\\n     * @param _interfaceId The interface identifier, as specified in ERC-165\\n     */\\n    function supportsInterface(bytes4 _interfaceId)\\n    external\\n    view\\n    returns (bool);\\n}\",\"keccak256\":\"0xa652c218ad6778ac294c6900f50e8f3c3f373277a7f9afba24297f986805e2bc\"},\"multi-token-standard/contracts/tokens/ERC1155/ERC1155.sol\":{\"content\":\"pragma solidity ^0.5.12;\\n\\nimport \\\"../../interfaces/IERC165.sol\\\";\\nimport \\\"../../utils/SafeMath.sol\\\";\\nimport \\\"../../interfaces/IERC1155TokenReceiver.sol\\\";\\nimport \\\"../../interfaces/IERC1155.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n\\n/**\\n * @dev Implementation of Multi-Token Standard contract\\n */\\ncontract ERC1155 is IERC165 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n\\n  /***********************************|\\n  |        Variables and Events       |\\n  |__________________________________*/\\n\\n  // onReceive function signatures\\n  bytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\\n  bytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\\n\\n  // Objects balances\\n  mapping (address => mapping(uint256 => uint256)) internal balances;\\n\\n  // Operator Functions\\n  mapping (address => mapping(address => bool)) internal operators;\\n\\n  // Events\\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n  event URI(string _uri, uint256 indexed _id);\\n\\n\\n  /***********************************|\\n  |     Public Transfer Functions     |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\n   * @param _from    Source address\\n   * @param _to      Target address\\n   * @param _id      ID of the token type\\n   * @param _amount  Transfered amount\\n   * @param _data    Additional data with no specified format, sent in call to `_to`\\n   */\\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\\n    public\\n  {\\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155#safeTransferFrom: INVALID_OPERATOR\\\");\\n    require(_to != address(0),\\\"ERC1155#safeTransferFrom: INVALID_RECIPIENT\\\");\\n    // require(_amount >= balances[_from][_id]) is not necessary since checked with safemath operations\\n\\n    _safeTransferFrom(_from, _to, _id, _amount);\\n    _callonERC1155Received(_from, _to, _id, _amount, _data);\\n  }\\n\\n  /**\\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n   * @param _from     Source addresses\\n   * @param _to       Target addresses\\n   * @param _ids      IDs of each token type\\n   * @param _amounts  Transfer amounts per token type\\n   * @param _data     Additional data with no specified format, sent in call to `_to`\\n   */\\n  function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\n    public\\n  {\\n    // Requirements\\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\\\");\\n    require(_to != address(0), \\\"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\\\");\\n\\n    _safeBatchTransferFrom(_from, _to, _ids, _amounts);\\n    _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\\n  }\\n\\n\\n  /***********************************|\\n  |    Internal Transfer Functions    |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\n   * @param _from    Source address\\n   * @param _to      Target address\\n   * @param _id      ID of the token type\\n   * @param _amount  Transfered amount\\n   */\\n  function _safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount)\\n    internal\\n  {\\n    // Update balances\\n    balances[_from][_id] = balances[_from][_id].sub(_amount); // Subtract amount\\n    balances[_to][_id] = balances[_to][_id].add(_amount);     // Add amount\\n\\n    // Emit event\\n    emit TransferSingle(msg.sender, _from, _to, _id, _amount);\\n  }\\n\\n  /**\\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\\n   */\\n  function _callonERC1155Received(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\\n    internal\\n  {\\n    // Check if recipient is contract\\n    if (_to.isContract()) {\\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received(msg.sender, _from, _id, _amount, _data);\\n      require(retval == ERC1155_RECEIVED_VALUE, \\\"ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n   * @param _from     Source addresses\\n   * @param _to       Target addresses\\n   * @param _ids      IDs of each token type\\n   * @param _amounts  Transfer amounts per token type\\n   */\\n  function _safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts)\\n    internal\\n  {\\n    require(_ids.length == _amounts.length, \\\"ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\\\");\\n\\n    // Number of transfer to execute\\n    uint256 nTransfer = _ids.length;\\n\\n    // Executing all transfers\\n    for (uint256 i = 0; i < nTransfer; i++) {\\n      // Update storage balance of previous bin\\n      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\\n      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\\n    }\\n\\n    // Emit event\\n    emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\\n  }\\n\\n  /**\\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\\n   */\\n  function _callonERC1155BatchReceived(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\n    internal\\n  {\\n    // Pass data if recipient is contract\\n    if (_to.isContract()) {\\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived(msg.sender, _from, _ids, _amounts, _data);\\n      require(retval == ERC1155_BATCH_RECEIVED_VALUE, \\\"ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\\\");\\n    }\\n  }\\n\\n\\n  /***********************************|\\n  |         Operator Functions        |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n   * @param _operator  Address to add to the set of authorized operators\\n   * @param _approved  True if the operator is approved, false to revoke approval\\n   */\\n  function setApprovalForAll(address _operator, bool _approved)\\n    external\\n  {\\n    // Update operator status\\n    operators[msg.sender][_operator] = _approved;\\n    emit ApprovalForAll(msg.sender, _operator, _approved);\\n  }\\n\\n  /**\\n   * @notice Queries the approval status of an operator for a given owner\\n   * @param _owner     The owner of the Tokens\\n   * @param _operator  Address of authorized operator\\n   * @return True if the operator is approved, false if not\\n   */\\n  function isApprovedForAll(address _owner, address _operator)\\n    public view returns (bool isOperator)\\n  {\\n    return operators[_owner][_operator];\\n  }\\n\\n\\n  /***********************************|\\n  |         Balance Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Get the balance of an account's Tokens\\n   * @param _owner  The address of the token holder\\n   * @param _id     ID of the Token\\n   * @return The _owner's balance of the Token type requested\\n   */\\n  function balanceOf(address _owner, uint256 _id)\\n    public view returns (uint256)\\n  {\\n    return balances[_owner][_id];\\n  }\\n\\n  /**\\n   * @notice Get the balance of multiple account/token pairs\\n   * @param _owners The addresses of the token holders\\n   * @param _ids    ID of the Tokens\\n   * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n   */\\n  function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\\n    public view returns (uint256[] memory)\\n  {\\n    require(_owners.length == _ids.length, \\\"ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH\\\");\\n\\n    // Variables\\n    uint256[] memory batchBalances = new uint256[](_owners.length);\\n\\n    // Iterate over each owner and token ID\\n    for (uint256 i = 0; i < _owners.length; i++) {\\n      batchBalances[i] = balances[_owners[i]][_ids[i]];\\n    }\\n\\n    return batchBalances;\\n  }\\n\\n\\n  /***********************************|\\n  |          ERC165 Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\n   */\\n  bytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\\n\\n  /**\\n   * INTERFACE_SIGNATURE_ERC1155 =\\n   * bytes4(keccak256(\\\"safeTransferFrom(address,address,uint256,uint256,bytes)\\\")) ^\\n   * bytes4(keccak256(\\\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\\\")) ^\\n   * bytes4(keccak256(\\\"balanceOf(address,uint256)\\\")) ^\\n   * bytes4(keccak256(\\\"balanceOfBatch(address[],uint256[])\\\")) ^\\n   * bytes4(keccak256(\\\"setApprovalForAll(address,bool)\\\")) ^\\n   * bytes4(keccak256(\\\"isApprovedForAll(address,address)\\\"));\\n   */\\n  bytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\\n\\n  /**\\n   * @notice Query if a contract implements an interface\\n   * @param _interfaceID  The interface identifier, as specified in ERC-165\\n   * @return `true` if the contract implements `_interfaceID` and\\n   */\\n  function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\\n    if (_interfaceID == INTERFACE_SIGNATURE_ERC165 ||\\n        _interfaceID == INTERFACE_SIGNATURE_ERC1155) {\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x73b2983ddcb1103fdc75a96e8c29865be6df0feefc8b7fa016d218b70b275a8f\"},\"multi-token-standard/contracts/tokens/ERC1155/ERC1155Metadata.sol\":{\"content\":\"pragma solidity ^0.5.11;\\nimport \\\"../../interfaces/IERC1155.sol\\\";\\n\\n\\n/**\\n * @notice Contract that handles metadata related methods.\\n * @dev Methods assume a deterministic generation of URI based on token IDs.\\n *      Methods also assume that URI uses hex representation of token IDs.\\n */\\ncontract ERC1155Metadata {\\n\\n  // URI's default URI prefix\\n  string internal baseMetadataURI;\\n  event URI(string _uri, uint256 indexed _id);\\n\\n\\n  /***********************************|\\n  |     Metadata Public Function s    |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice A distinct Uniform Resource Identifier (URI) for a given token.\\n   * @dev URIs are defined in RFC 3986.\\n   *      URIs are assumed to be deterministically generated based on token ID\\n   *      Token IDs are assumed to be represented in their hex format in URIs\\n   * @return URI string\\n   */\\n  function uri(uint256 _id) public view returns (string memory) {\\n    return string(abi.encodePacked(baseMetadataURI, _uint2str(_id), \\\".json\\\"));\\n  }\\n\\n\\n  /***********************************|\\n  |    Metadata Internal Functions    |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Will emit default URI log event for corresponding token _id\\n   * @param _tokenIDs Array of IDs of tokens to log default URI\\n   */\\n  function _logURIs(uint256[] memory _tokenIDs) internal {\\n    string memory baseURL = baseMetadataURI;\\n    string memory tokenURI;\\n\\n    for (uint256 i = 0; i < _tokenIDs.length; i++) {\\n      tokenURI = string(abi.encodePacked(baseURL, _uint2str(_tokenIDs[i]), \\\".json\\\"));\\n      emit URI(tokenURI, _tokenIDs[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Will emit a specific URI log event for corresponding token\\n   * @param _tokenIDs IDs of the token corresponding to the _uris logged\\n   * @param _URIs    The URIs of the specified _tokenIDs\\n   */\\n  function _logURIs(uint256[] memory _tokenIDs, string[] memory _URIs) internal {\\n    require(_tokenIDs.length == _URIs.length, \\\"ERC1155Metadata#_logURIs: INVALID_ARRAYS_LENGTH\\\");\\n    for (uint256 i = 0; i < _tokenIDs.length; i++) {\\n      emit URI(_URIs[i], _tokenIDs[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Will update the base URL of token's URI\\n   * @param _newBaseMetadataURI New base URL of token's URI\\n   */\\n  function _setBaseMetadataURI(string memory _newBaseMetadataURI) internal {\\n    baseMetadataURI = _newBaseMetadataURI;\\n  }\\n\\n\\n  /***********************************|\\n  |    Utility Internal Functions     |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Convert uint256 to string\\n   * @param _i Unsigned integer to convert to string\\n   */\\n  function _uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n\\n    uint256 j = _i;\\n    uint256 ii = _i;\\n    uint256 len;\\n\\n    // Get number of bytes\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len - 1;\\n\\n    // Get each individual ASCII\\n    while (ii != 0) {\\n      bstr[k--] = byte(uint8(48 + ii % 10));\\n      ii /= 10;\\n    }\\n\\n    // Convert to string\\n    return string(bstr);\\n  }\\n\\n}\",\"keccak256\":\"0x89f189ac68d98a82a78b9d8625cc80640e725ec9c67f01e2e61e11885aac6561\"},\"multi-token-standard/contracts/tokens/ERC1155/ERC1155MintBurn.sol\":{\"content\":\"pragma solidity ^0.5.12;\\n\\nimport \\\"./ERC1155.sol\\\";\\n\\n\\n/**\\n * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\\n *      a parent contract to be executed as they are `internal` functions\\n */\\ncontract ERC1155MintBurn is ERC1155 {\\n\\n\\n  /****************************************|\\n  |            Minting Functions           |\\n  |_______________________________________*/\\n\\n  /**\\n   * @notice Mint _amount of tokens of a given id\\n   * @param _to      The address to mint tokens to\\n   * @param _id      Token id to mint\\n   * @param _amount  The amount to be minted\\n   * @param _data    Data to pass if receiver is contract\\n   */\\n  function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data)\\n    internal\\n  {\\n    // Add _amount\\n    balances[_to][_id] = balances[_to][_id].add(_amount);\\n\\n    // Emit event\\n    emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\\n\\n    // Calling onReceive method if recipient is contract\\n    _callonERC1155Received(address(0x0), _to, _id, _amount, _data);\\n  }\\n\\n  /**\\n   * @notice Mint tokens for each ids in _ids\\n   * @param _to       The address to mint tokens to\\n   * @param _ids      Array of ids to mint\\n   * @param _amounts  Array of amount of tokens to mint per id\\n   * @param _data    Data to pass if receiver is contract\\n   */\\n  function _batchMint(address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\n    internal\\n  {\\n    require(_ids.length == _amounts.length, \\\"ERC1155MintBurn#batchMint: INVALID_ARRAYS_LENGTH\\\");\\n\\n    // Number of mints to execute\\n    uint256 nMint = _ids.length;\\n\\n     // Executing all minting\\n    for (uint256 i = 0; i < nMint; i++) {\\n      // Update storage balance\\n      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\\n    }\\n\\n    // Emit batch mint event\\n    emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\\n\\n    // Calling onReceive method if recipient is contract\\n    _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, _data);\\n  }\\n\\n\\n  /****************************************|\\n  |            Burning Functions           |\\n  |_______________________________________*/\\n\\n  /**\\n   * @notice Burn _amount of tokens of a given token id\\n   * @param _from    The address to burn tokens from\\n   * @param _id      Token id to burn\\n   * @param _amount  The amount to be burned\\n   */\\n  function _burn(address _from, uint256 _id, uint256 _amount)\\n    internal\\n  {\\n    //Substract _amount\\n    balances[_from][_id] = balances[_from][_id].sub(_amount);\\n\\n    // Emit event\\n    emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\\n  }\\n\\n  /**\\n   * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n   * @param _from     The address to burn tokens from\\n   * @param _ids      Array of token ids to burn\\n   * @param _amounts  Array of the amount to be burned\\n   */\\n  function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts)\\n    internal\\n  {\\n    require(_ids.length == _amounts.length, \\\"ERC1155MintBurn#batchBurn: INVALID_ARRAYS_LENGTH\\\");\\n\\n    // Number of mints to execute\\n    uint256 nBurn = _ids.length;\\n\\n     // Executing all minting\\n    for (uint256 i = 0; i < nBurn; i++) {\\n      // Update storage balance\\n      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\\n    }\\n\\n    // Emit batch mint event\\n    emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\\n  }\\n\\n}\\n\\n\",\"keccak256\":\"0xa979a927aaa5d0c6d46b0995675f8bdd99e74e74f548f111c8af695d305bf817\"},\"multi-token-standard/contracts/utils/Address.sol\":{\"content\":\"/**\\n * Copyright 2018 ZeroEx Intl.\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.5.12;\\n\\n\\n/**\\n * Utility library of inline functions on addresses\\n */\\nlibrary Address {\\n\\n  /**\\n   * Returns whether the target address is a contract\\n   * @dev This function will return false if invoked during the constructor of a contract,\\n   * as the code is not actually created until after the constructor finishes.\\n   * @param account address of the account to check\\n   * @return whether the target address is a contract\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n    // XXX Currently there is no better way to check if there is a contract in an address\\n    // than to check the size of the code at that address.\\n    // See https://ethereum.stackexchange.com/a/14016/36603\\n    // for more details about how this works.\\n    // TODO Check this again before the Serenity release, because all addresses will be\\n    // contracts then.\\n    assembly { codehash := extcodehash(account) }\\n    return (codehash != 0x0 && codehash != accountHash);\\n  }\\n\\n}\",\"keccak256\":\"0x92f1e6990efaaf076a66e47541e40f90c7146c045b3ad9b74e1f76e510a431f4\"},\"multi-token-standard/contracts/utils/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.12;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n   * @dev Multiplies two unsigned integers, reverts on overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath#mul: OVERFLOW\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath#div: DIVISION_BY_ZERO\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath#sub: UNDERFLOW\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Adds two unsigned integers, reverts on overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath#add: OVERFLOW\\\");\\n\\n    return c; \\n  }\\n\\n  /**\\n   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n   * reverts when dividing by zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath#mod: DIVISION_BY_ZERO\\\");\\n    return a % b;\\n  }\\n\\n}\",\"keccak256\":\"0xe244d8105233bbf40e1a904aad734d06a12a042125ab5b54602b139a944f93eb\"},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor () internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @return the address of the owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner());\\n        _;\\n    }\\n\\n    /**\\n     * @return true if `msg.sender` is the owner of the contract.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to relinquish control of the contract.\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n     * It will not be possible to call the functions with the `onlyOwner`\\n     * modifier anymore.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x980de387a1a020a498f53d00f89fecebb12c949a17e8f160093c0303ede2b786\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014c5760003560e01c80638f32d59b116100c3578063d2a6b51a1161007c578063d2a6b51a14610cee578063e38e3b2414610dc6578063e8a3d48514610ed2578063e985e9c514610f55578063f242432a14610fd1578063f2fde38b146110e05761014c565b80638f32d59b1461094657806395d89b4114610968578063a22cb465146109eb578063b48ab8b614610a3b578063bd85b03914610c3e578063cd53d08e14610c805761014c565b80632eb2c2d6116101155780632eb2c2d6146103845780634e1273f4146105a7578063715018a614610748578063731133e9146107525780637e518ec8146108415780638da5cb5b146108fc5761014c565b8062fdd58e1461015157806301ffc9a7146101b357806306fdde03146102185780630e89341c1461029b5780632693ebf214610342575b600080fd5b61019d6004803603604081101561016757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611124565b6040518082815260200191505060405180910390f35b6101fe600480360360208110156101c957600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061117e565b604051808215151515815260200191505060405180910390f35b61022061122f565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610260578082015181840152602081019050610245565b50505050905090810190601f16801561028d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102c7600480360360208110156102b157600080fd5b81019080803590602001909291905050506112cd565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103075780820151818401526020810190506102ec565b50505050905090810190601f1680156103345780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61036e6004803603602081101561035857600080fd5b81019080803590602001909291905050506113e0565b6040518082815260200191505060405180910390f35b6105a5600480360360a081101561039a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156103f757600080fd5b82018360208201111561040957600080fd5b8035906020019184602083028401116401000000008311171561042b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561048b57600080fd5b82018360208201111561049d57600080fd5b803590602001918460208302840111640100000000831117156104bf57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561051f57600080fd5b82018360208201111561053157600080fd5b8035906020019184600183028401116401000000008311171561055357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506113f8565b005b6106f1600480360360408110156105bd57600080fd5b81019080803590602001906401000000008111156105da57600080fd5b8201836020820111156105ec57600080fd5b8035906020019184602083028401116401000000008311171561060e57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561066e57600080fd5b82018360208201111561068057600080fd5b803590602001918460208302840111640100000000831117156106a257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611533565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610734578082015181840152602081019050610719565b505050509050019250505060405180910390f35b610750611679565b005b61083f6004803603608081101561076857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001906401000000008111156107b957600080fd5b8201836020820111156107cb57600080fd5b803590602001918460018302840111640100000000831117156107ed57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061174b565b005b6108fa6004803603602081101561085757600080fd5b810190808035906020019064010000000081111561087457600080fd5b82018360208201111561088657600080fd5b803590602001918460018302840111640100000000831117156108a857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611853565b005b610904611870565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61094e61189a565b604051808215151515815260200191505060405180910390f35b6109706118f2565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109b0578082015181840152602081019050610995565b50505050905090810190601f1680156109dd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610a3960048036036040811015610a0157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611990565b005b610c3c60048036036080811015610a5157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610a8e57600080fd5b820183602082011115610aa057600080fd5b80359060200191846020830284011164010000000083111715610ac257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610b2257600080fd5b820183602082011115610b3457600080fd5b80359060200191846020830284011164010000000083111715610b5657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610bb657600080fd5b820183602082011115610bc857600080fd5b80359060200191846001830284011164010000000083111715610bea57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611a91565b005b610c6a60048036036020811015610c5457600080fd5b8101908080359060200190929190505050611be6565b6040518082815260200191505060405180910390f35b610cac60048036036020811015610c9657600080fd5b8101908080359060200190929190505050611c03565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610dc460048036036040811015610d0457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610d4157600080fd5b820183602082011115610d5357600080fd5b80359060200191846020830284011164010000000083111715610d7557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611c36565b005b610ebc60048036036080811015610ddc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610e2357600080fd5b820183602082011115610e3557600080fd5b80359060200191846001830284011164010000000083111715610e5757600080fd5b909192939192939080359060200190640100000000811115610e7857600080fd5b820183602082011115610e8a57600080fd5b80359060200191846001830284011164010000000083111715610eac57600080fd5b9091929391929390505050611d00565b6040518082815260200191505060405180910390f35b610eda611e5b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610f1a578082015181840152602081019050610eff565b50505050905090810190601f168015610f475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610fb760048036036040811015610f6b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611efd565b604051808215151515815260200191505060405180910390f35b6110de600480360360a0811015610fe757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561105857600080fd5b82018360208201111561106a57600080fd5b8035906020019184600183028401116401000000008311171561108c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061202e565b005b611122600480360360208110156110f657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612169565b005b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60006301ffc9a760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611217575063d9b67a2660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b15611225576001905061122a565b600090505b919050565b60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112c55780601f1061129a576101008083540402835291602001916112c5565b820191906000526020600020905b8154815290600101906020018083116112a857829003601f168201915b505050505081565b60606112d882612186565b61132d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180613a006025913960400191505060405180910390fd5b6113d960028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113c65780601f1061139b576101008083540402835291602001916113c6565b820191906000526020600020905b8154815290600101906020018083116113a957829003601f168201915b50505050506113d4846121f2565b61231f565b9050919050565b60076020528060005260406000206000915090505481565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061143857506114378533611efd565b5b61148d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180613a51602f913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611513576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806139d06030913960400191505060405180910390fd5b61151f85858585612363565b61152c85858585856126c8565b5050505050565b6060815183511461158f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180613a25602c913960400191505060405180910390fd5b606083516040519080825280602002602001820160405280156115c15781602001602082028038833980820191505090505b50905060008090505b845181101561166e576000808683815181106115e257fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085838151811061163257fe5b602002602001015181526020019081526020016000205482828151811061165557fe5b60200260200101818152505080806001019150506115ca565b508091505092915050565b61168161189a565b61168a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b823373ffffffffffffffffffffffffffffffffffffffff166006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611803576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180613b556031913960400191505060405180910390fd5b61180f85858585612983565b611835836007600087815260200190815260200160002054612ad190919063ffffffff16565b60076000868152602001908152602001600020819055505050505050565b61185b61189a565b61186457600080fd5b61186d81612b59565b50565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119885780601f1061195d57610100808354040283529160200191611988565b820191906000526020600020905b81548152906001019060200180831161196b57829003601f168201915b505050505081565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b60008090505b8351811015611bd3576000848281518110611aae57fe5b602002602001015190503373ffffffffffffffffffffffffffffffffffffffff166006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611b6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180613942602f913960400191505060405180910390fd5b6000848381518110611b7d57fe5b60200260200101519050611bad816007600085815260200190815260200160002054612ad190919063ffffffff16565b600760008481526020019081526020016000208190555050508080600101915050611a97565b50611be084848484612b73565b50505050565b600060076000838152602001908152602001600020549050919050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611cbc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180613b29602c913960400191505060405180910390fd5b60008090505b8151811015611cfb576000828281518110611cd957fe5b60200260200101519050611ced8482612df9565b508080600101915050611cc2565b505050565b6000611d0a61189a565b611d1357600080fd5b60006005549050336006600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000868690501115611ddd57807f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b878760405180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060405180910390a25b611e2d88828987878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612983565b866007600083815260200190815260200160002081905550611e4d612f08565b809150509695505050505050565b6060600a8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ef35780601f10611ec857610100808354040283529160200191611ef3565b820191906000526020600020905b815481529060010190602001808311611ed657829003601f168201915b5050505050905090565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663c4552791866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611fb957600080fd5b505afa158015611fcd573d6000803e3d6000fd5b505050506040513d6020811015611fe357600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141561201a576001915050612028565b6120248484612f1c565b9150505b92915050565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061206e575061206d8533611efd565b5b6120c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613971602a913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612149576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613917602b913960400191505060405180910390fd5b61215585858585612fb0565b61216285858585856131a4565b5050505050565b61217161189a565b61217a57600080fd5b612183816133dd565b50565b60008073ffffffffffffffffffffffffffffffffffffffff166006600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6060600082141561223a576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061231a565b600082905060005b60008214612264578080600101915050600a828161225c57fe5b049150612242565b6060816040519080825280601f01601f1916602001820160405280156122995781602001600182028038833980820191505090505b50905060006001830390505b6000861461231257600a86816122b757fe5b0660300160f81b828280600190039350815181106122d157fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a868161230a57fe5b0495506122a5565b819450505050505b919050565b606061235b83836040518060200160405280600081525060405180602001604052806000815250604051806020016040528060008152506134d7565b905092915050565b80518251146123bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018061399b6035913960400191505060405180910390fd5b60008251905060008090505b818110156125ba576124598382815181106123e057fe5b60200260200101516000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087858151811061243457fe5b602002602001015181526020019081526020016000205461379d90919063ffffffff16565b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008684815181106124a557fe5b60200260200101518152602001908152602001600020819055506125478382815181106124ce57fe5b60200260200101516000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087858151811061252257fe5b6020026020010151815260200190815260200160002054612ad190919063ffffffff16565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086848151811061259357fe5b602002602001015181526020019081526020016000208190555080806001019150506123c9565b508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561266a57808201518184015260208101905061264f565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156126ac578082015181840152602081019050612691565b5050505090500194505050505060405180910390a45050505050565b6126e78473ffffffffffffffffffffffffffffffffffffffff16613826565b1561297c5760008473ffffffffffffffffffffffffffffffffffffffff1663bc197c8133888787876040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156127cd5780820151818401526020810190506127b2565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561280f5780820151818401526020810190506127f4565b50505050905001848103825285818151815260200191508051906020019080838360005b8381101561284e578082015181840152602081019050612833565b50505050905090810190601f16801561287b5780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1580156128a057600080fd5b505af11580156128b4573d6000803e3d6000fd5b505050506040513d60208110156128ca57600080fd5b8101908080519060200190929190505050905063bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461297a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603f815260200180613ab0603f913960400191505060405180910390fd5b505b5050505050565b6129e5826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002054612ad190919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628686604051808381526020018281526020019250505060405180910390a4612acb6000858585856131a4565b50505050565b600080828401905083811015612b4f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f536166654d617468236164643a204f564552464c4f570000000000000000000081525060200191505060405180910390fd5b8091505092915050565b8060029080519060200190612b6f929190613871565b5050565b8151835114612bcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526030815260200180613a806030913960400191505060405180910390fd5b60008351905060008090505b81811015612cdc57612c69848281518110612bf057fe5b60200260200101516000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000888581518110612c4457fe5b6020026020010151815260200190815260200160002054612ad190919063ffffffff16565b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000878481518110612cb557fe5b60200260200101518152602001908152602001600020819055508080600101915050612bd9565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015612d8d578082015181840152602081019050612d72565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015612dcf578082015181840152602081019050612db4565b5050505090500194505050505060405180910390a4612df26000868686866126c8565b5050505050565b803373ffffffffffffffffffffffffffffffffffffffff166006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612eb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180613b556031913960400191505060405180910390fd5b826006600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600560008154809291906001019190505550565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b613012816000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000205461379d90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020819055506130c7816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002054612ad190919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051808381526020018281526020019250505060405180910390a450505050565b6131c38473ffffffffffffffffffffffffffffffffffffffff16613826565b156133d65760008473ffffffffffffffffffffffffffffffffffffffff1663f23a6e6133888787876040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156132aa57808201518184015260208101905061328f565b50505050905090810190601f1680156132d75780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b1580156132fa57600080fd5b505af115801561330e573d6000803e3d6000fd5b505050506040513d602081101561332457600080fd5b8101908080519060200190929190505050905063f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146133d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a815260200180613aef603a913960400191505060405180910390fd5b505b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561341757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060808690506060869050606086905060608690506060869050606081518351855187518951010101016040519080825280601f01601f1916602001820160405280156135335781602001600182028038833980820191505090505b5090506060819050600080905060008090505b88518110156135b45788818151811061355b57fe5b602001015160f81c60f81b83838060010194508151811061357857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613546565b5060008090505b8751811015613629578781815181106135d057fe5b602001015160f81c60f81b8383806001019450815181106135ed57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506135bb565b5060008090505b865181101561369e5786818151811061364557fe5b602001015160f81c60f81b83838060010194508151811061366257fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613630565b5060008090505b8551811015613713578581815181106136ba57fe5b602001015160f81c60f81b8383806001019450815181106136d757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506136a5565b5060008090505b84518110156137885784818151811061372f57fe5b602001015160f81c60f81b83838060010194508151811061374c57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061371a565b50819850505050505050505095945050505050565b600082821115613815576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f536166654d617468237375623a20554e444552464c4f5700000000000000000081525060200191505060405180910390fd5b600082840390508091505092915050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f91506000801b82141580156138685750808214155b92505050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106138b257805160ff19168380011785556138e0565b828001600101855582156138e0579182015b828111156138df5782518255916020019190600101906138c4565b5b5090506138ed91906138f1565b5090565b61391391905b8082111561390f5760008160009055506001016138f7565b5090565b9056fe4552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f524543495049454e54455243313135355472616461626c652362617463684d696e743a204f4e4c595f43524541544f525f414c4c4f5745444552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f4f50455241544f5245524331313535235f7361666542617463685472616e7366657246726f6d3a20494e56414c49445f4152524159535f4c454e47544845524331313535237361666542617463685472616e7366657246726f6d3a20494e56414c49445f524543495049454e544552433732315472616461626c65237572693a204e4f4e4558495354454e545f544f4b454e455243313135352362616c616e63654f6642617463683a20494e56414c49445f41525241595f4c454e47544845524331313535237361666542617463685472616e7366657246726f6d3a20494e56414c49445f4f50455241544f52455243313135354d696e744275726e2362617463684d696e743a20494e56414c49445f4152524159535f4c454e47544845524331313535235f63616c6c6f6e45524331313535426174636852656365697665643a20494e56414c49445f4f4e5f524543454956455f4d45535341474545524331313535235f63616c6c6f6e4552433131353552656365697665643a20494e56414c49445f4f4e5f524543454956455f4d455353414745455243313135355472616461626c652373657443726561746f723a20494e56414c49445f414444524553532e455243313135355472616461626c652363726561746f724f6e6c793a204f4e4c595f43524541544f525f414c4c4f574544a265627a7a723158208747c04013f9e2961b563c171226cff444ac182351fbaf7f4efa3981cacfdfb764736f6c634300050c0032",
  "devdoc": {
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "_id": "ID of the Token",
          "_owner": "The address of the token holder"
        },
        "return": "The _owner's balance of the Token type requested"
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "_ids": "ID of the Tokens",
          "_owners": "The addresses of the token holders"
        },
        "return": "The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)"
      },
      "batchMint(address,uint256[],uint256[],bytes)": {
        "details": "Mint tokens for each id in _ids",
        "params": {
          "_data": "Data to pass if receiver is contract",
          "_ids": "Array of ids to mint",
          "_quantities": "Array of amounts of tokens to mint per id",
          "_to": "The address to mint tokens to"
        }
      },
      "create(address,uint256,string,bytes)": {
        "details": "Creates a new token type and assigns _initialSupply to an address NOTE: remove onlyOwner if you want third parties to create new tokens on your contract (which may change your IDs)",
        "params": {
          "_data": "Data to pass if receiver is contract",
          "_initialOwner": "address of the first owner of the token",
          "_initialSupply": "amount to supply the first owner",
          "_uri": "Optional URI for this token type"
        },
        "return": "The newly created token ID"
      },
      "isOwner()": {
        "return": "true if `msg.sender` is the owner of the contract."
      },
      "mint(address,uint256,uint256,bytes)": {
        "details": "Mints some amount of tokens to an address",
        "params": {
          "_data": "Data to pass if receiver is contract",
          "_id": "Token ID to mint",
          "_quantity": "Amount of tokens to mint",
          "_to": "Address of the future owner of the token"
        }
      },
      "owner()": {
        "return": "the address of the owner."
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "_amounts": "Transfer amounts per token type",
          "_data": "Additional data with no specified format, sent in call to `_to`",
          "_from": "Source addresses",
          "_ids": "IDs of each token type",
          "_to": "Target addresses"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "_amount": "Transfered amount",
          "_data": "Additional data with no specified format, sent in call to `_to`",
          "_from": "Source address",
          "_id": "ID of the token type",
          "_to": "Target address"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "_approved": "True if the operator is approved, false to revoke approval",
          "_operator": "Address to add to the set of authorized operators"
        }
      },
      "setBaseMetadataURI(string)": {
        "details": "Will update the base URL of token's URI",
        "params": {
          "_newBaseMetadataURI": "New base URL of token's URI"
        }
      },
      "setCreator(address,uint256[])": {
        "details": "Change the creator address for given tokens",
        "params": {
          "_ids": "Array of Token IDs to change creator",
          "_to": "Address of the new creator"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceID": "The interface identifier, as specified in ERC-165"
        },
        "return": "`true` if the contract implements `_interfaceID` and"
      },
      "totalSupply(uint256)": {
        "details": "Returns the total quantity for a token ID",
        "params": {
          "_id": "uint256 ID of the token to query"
        },
        "return": "amount of token in existence"
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    },
    "title": "MyCollectible MyCollectible - a contract for my semi-fungible tokens."
  },
  "userdoc": {
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": "Get the balance of an account's Tokens"
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "Get the balance of multiple account/token pairs"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings."
      },
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "Send multiple types of Tokens from the _from address to the _to address (with safety call)"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "Transfers amount amount of an _id from the _from address to the _to address specified"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      }
    }
  }
}